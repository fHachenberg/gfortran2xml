
        Namespace: A-H: (REAL 4) I-N: (INTEGER 4) O-Z: (REAL 4)
        procedure name = pdlaed3
        symtree: iu  Ambig 0
        symbol iu (INTEGER 4)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC)

        symtree: iiu  Ambig 0
        symbol iiu (INTEGER 4)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC)

        symtree: gi  Ambig 0
        symbol gi (INTEGER 4)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC)

        symtree: d  Ambig 0
        symbol d (REAL 8)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC DIMENSION DUMMY)
        Array spec:(1 AS_ASSUMED_SIZE 1 () )

        symtree: ctot  Ambig 0
        symbol ctot (INTEGER 4)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC DIMENSION DUMMY)
        Array spec:(2 AS_EXPLICIT 0 (- npcol 1) 1 4 )

        symtree: col  Ambig 0
        symbol col (INTEGER 4)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC)

        symtree: aux  Ambig 0
        symbol aux (REAL 8)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC)

        symtree: blacs_gridinfo  Ambig 0
        symbol blacs_gridinfo (UNKNOWN 0)(PROCEDURE UNKNOWN-INTENT UNKNOWN-ACCESS EXTERNAL-PROC EXTERNAL SUBROUTINE)

        symtree: buf  Ambig 0
        symbol buf (REAL 8)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC DIMENSION DUMMY)
        Array spec:(1 AS_ASSUMED_SIZE 1 () )

        symtree: dgesd2d  Ambig 0
        symbol dgesd2d (UNKNOWN 0)(PROCEDURE UNKNOWN-INTENT UNKNOWN-ACCESS EXTERNAL-PROC EXTERNAL SUBROUTINE)

        symtree: dcopy  Ambig 0
        symbol dcopy (UNKNOWN 0)(PROCEDURE UNKNOWN-INTENT UNKNOWN-ACCESS EXTERNAL-PROC EXTERNAL SUBROUTINE)

        symtree: dcol  Ambig 0
        symbol dcol (INTEGER 4)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC DUMMY)

        symtree: dgerv2d  Ambig 0
        symbol dgerv2d (UNKNOWN 0)(PROCEDURE UNKNOWN-INTENT UNKNOWN-ACCESS EXTERNAL-PROC EXTERNAL SUBROUTINE)

        symtree: dgebs2d  Ambig 0
        symbol dgebs2d (UNKNOWN 0)(PROCEDURE UNKNOWN-INTENT UNKNOWN-ACCESS EXTERNAL-PROC EXTERNAL SUBROUTINE)

        symtree: dgebr2d  Ambig 0
        symbol dgebr2d (UNKNOWN 0)(PROCEDURE UNKNOWN-INTENT UNKNOWN-ACCESS EXTERNAL-PROC EXTERNAL SUBROUTINE)

        symtree: drow  Ambig 0
        symbol drow (INTEGER 4)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC DUMMY)

        symtree: dlaed4  Ambig 0
        symbol dlaed4 (UNKNOWN 0)(PROCEDURE UNKNOWN-INTENT UNKNOWN-ACCESS EXTERNAL-PROC EXTERNAL SUBROUTINE)

        symtree: dlamc3  Ambig 0
        symbol dlamc3 (REAL 8)(PROCEDURE UNKNOWN-INTENT UNKNOWN-ACCESS EXTERNAL-PROC EXTERNAL FUNCTION)
        result: dlamc3

        symtree: dlamda  Ambig 0
        symbol dlamda (REAL 8)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC DIMENSION DUMMY)
        Array spec:(1 AS_ASSUMED_SIZE 1 () )

        symtree: dnrm2  Ambig 0
        symbol dnrm2 (REAL 8)(PROCEDURE UNKNOWN-INTENT UNKNOWN-ACCESS EXTERNAL-PROC EXTERNAL FUNCTION)
        result: dnrm2

        symtree: iinfo  Ambig 0
        symbol iinfo (INTEGER 4)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC)

        symtree: ictxt  Ambig 0
        symbol ictxt (INTEGER 4)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC DUMMY)

        symtree: i  Ambig 0
        symbol i (INTEGER 4)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC)

        symtree: indxc  Ambig 0
        symbol indxc (INTEGER 4)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC DIMENSION DUMMY)
        Array spec:(1 AS_ASSUMED_SIZE 1 () )

        symtree: indx  Ambig 0
        symbol indx (INTEGER 4)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC DIMENSION DUMMY)
        Array spec:(1 AS_ASSUMED_SIZE 1 () )

        symtree: indrow  Ambig 0
        symbol indrow (INTEGER 4)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC DIMENSION DUMMY)
        Array spec:(1 AS_ASSUMED_SIZE 1 () )

        symtree: indcol  Ambig 0
        symbol indcol (INTEGER 4)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC DIMENSION DUMMY)
        Array spec:(1 AS_ASSUMED_SIZE 1 () )

        symtree: indxr  Ambig 0
        symbol indxr (INTEGER 4)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC DIMENSION DUMMY)
        Array spec:(1 AS_ASSUMED_SIZE 1 () )

        symtree: indxg2l  Ambig 0
        symbol indxg2l (INTEGER 4)(PROCEDURE UNKNOWN-INTENT UNKNOWN-ACCESS EXTERNAL-PROC EXTERNAL FUNCTION)
        result: indxg2l

        symtree: ipd  Ambig 0
        symbol ipd (INTEGER 4)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC)

        symtree: info  Ambig 0
        symbol info (INTEGER 4)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC DUMMY)

        symtree: mod  Ambig 0
        symbol mod (INTEGER 4)(PROCEDURE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC INTRINSIC FUNCTION IMPLICIT-TYPE)
        result: mod

        symtree: ldu  Ambig 0
        symbol ldu (INTEGER 4)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC DUMMY)

        symtree: klc  Ambig 0
        symbol klc (INTEGER 4)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC)

        symtree: j  Ambig 0
        symbol j (INTEGER 4)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC)

        symtree: kk  Ambig 0
        symbol kk (INTEGER 4)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC)

        symtree: jju  Ambig 0
        symbol jju (INTEGER 4)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC)

        symtree: ju  Ambig 0
        symbol ju (INTEGER 4)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC)

        symtree: k  Ambig 0
        symbol k (INTEGER 4)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC DUMMY)

        symtree: kl  Ambig 0
        symbol kl (INTEGER 4)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC)

        symtree: klr  Ambig 0
        symbol klr (INTEGER 4)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC)

        symtree: temp  Ambig 0
        symbol temp (REAL 8)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC)

        symtree: sign  Ambig 0
        symbol sign (REAL 4)(PROCEDURE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC INTRINSIC FUNCTION IMPLICIT-TYPE)
        result: sign

        symtree: mykl  Ambig 0
        symbol mykl (INTEGER 4)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC)

        symtree: mycol  Ambig 0
        symbol mycol (INTEGER 4)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC)

        symtree: myklr  Ambig 0
        symbol myklr (INTEGER 4)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC)

        symtree: nb  Ambig 0
        symbol nb (INTEGER 4)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC DUMMY)

        symtree: n  Ambig 0
        symbol n (INTEGER 4)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC DUMMY)

        symtree: myrow  Ambig 0
        symbol myrow (INTEGER 4)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC)

        symtree: pdr  Ambig 0
        symbol pdr (INTEGER 4)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC)

        symtree: npcol  Ambig 0
        symbol npcol (INTEGER 4)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC DUMMY)

        symtree: nprow  Ambig 0
        symbol nprow (INTEGER 4)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC)

        symtree: pdc  Ambig 0
        symbol pdc (INTEGER 4)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC)

        symtree: one  Ambig 0
        symbol one (REAL 8)(PARAMETER UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC)
        value: 0.1e1_8

        symtree: pdlaed3  Ambig 0
        symbol pdlaed3 (UNKNOWN 0)(PROCEDURE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC SUBROUTINE)
        Formal arglist: ictxt k n nb d drow dcol rho dlamda w z u ldu buf indx indcol indrow indxr indxc ctot npcol info

        symtree: rho  Ambig 0
        symbol rho (REAL 8)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC DUMMY)

        symtree: row  Ambig 0
        symbol row (INTEGER 4)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC)

        symtree: sqrt  Ambig 0
        symbol sqrt (REAL 4)(PROCEDURE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC INTRINSIC FUNCTION IMPLICIT-TYPE)
        result: sqrt

        symtree: w  Ambig 0
        symbol w (REAL 8)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC DIMENSION DUMMY)
        Array spec:(1 AS_ASSUMED_SIZE 1 () )

        symtree: u  Ambig 0
        symbol u (REAL 8)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC DIMENSION DUMMY)
        Array spec:(2 AS_ASSUMED_SIZE 1 ldu 1 () )

        symtree: z  Ambig 0
        symbol z (REAL 8)(VARIABLE UNKNOWN-INTENT UNKNOWN-ACCESS UNKNOWN-PROC DIMENSION DUMMY)
        Array spec:(1 AS_ASSUMED_SIZE 1 () )


      ASSIGN info 0
      IF (= k 0)
        RETURN 
      ENDIF
      CALL blacs_gridinfo ((ictxt) (nprow) (npcol) (myrow) (mycol))
      ASSIGN row drow
      ASSIGN col dcol
      DO i=1 n nb
        DO j=0 (- nb 1) 1
          IF (<= (+ i j) n)
            ASSIGN indrow((+ i j)) row
            ASSIGN indcol((+ i j)) col
          ENDIF
10        CONTINUE
        END DO
        ASSIGN row __mod_i4[[(((+ row 1)) (nprow))]]
        ASSIGN col __mod_i4[[(((+ col 1)) (npcol))]]
20      CONTINUE
      END DO
      ASSIGN mykl (+ (+ ctot(mycol , 1) ctot(mycol , 2)) ctot(mycol , 3))
      ASSIGN klr (/ mykl nprow)
      IF (= myrow drow)
        ASSIGN myklr (+ klr __mod_i4[[((mykl) (nprow))]])
      ELSE
        ASSIGN myklr klr
      ENDIF
      ASSIGN pdc 1
      ASSIGN col dcol
30    CONTINUE
      IF (<> mycol col)
        ASSIGN pdc (+ (+ (+ pdc ctot(col , 1)) ctot(col , 2)) ctot(col , 3))
        ASSIGN col __mod_i4[[(((+ col 1)) (npcol))]]
        GOTO 30
      ENDIF
      ASSIGN pdr pdc
      ASSIGN kl (+ klr __mod_i4[[((mykl) (nprow))]])
      ASSIGN row drow
40    CONTINUE
      IF (<> myrow row)
        ASSIGN pdr (+ pdr kl)
        ASSIGN kl klr
        ASSIGN row __mod_i4[[(((+ row 1)) (nprow))]]
        GOTO 40
      ENDIF
      DO i=1 k 1
        ASSIGN dlamda(i) (- dlamc3[[((dlamda(i)) (dlamda(i)))]] dlamda(i))
        ASSIGN z(i) 0.1e1_8
50      CONTINUE
      END DO
      IF (> myklr 0)
        ASSIGN kk pdr
        DO i=1 myklr 1
          CALL dlaed4 ((k) (kk) (dlamda(FULL)) (w(FULL)) (buf(FULL)) (rho) (buf((+ k i))) (iinfo))
          IF (<> iinfo 0)
            ASSIGN info kk
          ENDIF
          DO j=1 (- kk 1) 1
            ASSIGN z(j) (* z(j) (/ buf(j) (- dlamda(j) dlamda(kk))))
60          CONTINUE
          END DO
          ASSIGN z(kk) (* z(kk) buf(kk))
          DO j=(+ kk 1) k 1
            ASSIGN z(j) (* z(j) (/ buf(j) (- dlamda(j) dlamda(kk))))
70          CONTINUE
          END DO
          ASSIGN kk (+ kk 1)
80        CONTINUE
        END DO
        IF (<> myrow drow)
          CALL dcopy ((k) (z(FULL)) (1) (buf(FULL)) (1))
          CALL dgesd2d ((ictxt) ((+ k myklr)) (1) (buf(FULL)) ((+ k myklr)) (drow) (mycol))
        ELSE
          ASSIGN ipd (+ (* 2 k) 1)
          CALL dcopy ((myklr) (buf((+ k 1))) (1) (buf(ipd)) (1))
          IF (> klr 0)
            ASSIGN ipd (+ myklr ipd)
            ASSIGN row __mod_i4[[(((+ drow 1)) (nprow))]]
            DO i=1 (- nprow 1) 1
              CALL dgerv2d ((ictxt) ((+ k klr)) (1) (buf(FULL)) ((+ k klr)) (row) (mycol))
              CALL dcopy ((klr) (buf((+ k 1))) (1) (buf(ipd)) (1))
              DO j=1 k 1
                ASSIGN z(j) (* z(j) buf(j))
90              CONTINUE
              END DO
              ASSIGN ipd (+ ipd klr)
              ASSIGN row __mod_i4[[(((+ row 1)) (nprow))]]
100           CONTINUE
            END DO
          ENDIF
        ENDIF
      ENDIF
      IF (= myrow drow)
        IF (AND (<> mycol dcol) (<> mykl 0))
          CALL dcopy ((k) (z(FULL)) (1) (buf(FULL)) (1))
          CALL dcopy ((mykl) (buf((+ (* 2 k) 1))) (1) (buf((+ k 1))) (1))
          CALL dgesd2d ((ictxt) ((+ k mykl)) (1) (buf(FULL)) ((+ k mykl)) (myrow) (dcol))
        ELSE IF (= mycol dcol)
          ASSIGN ipd (+ (* 2 k) 1)
          ASSIGN col dcol
          ASSIGN kl mykl
          DO i=1 (- npcol 1) 1
            ASSIGN ipd (+ ipd kl)
            ASSIGN col __mod_i4[[(((+ col 1)) (npcol))]]
            ASSIGN kl (+ (+ ctot(col , 1) ctot(col , 2)) ctot(col , 3))
            IF (<> kl 0)
              CALL dgerv2d ((ictxt) ((+ k kl)) (1) (buf(FULL)) ((+ k kl)) (myrow) (col))
              CALL dcopy ((kl) (buf((+ k 1))) (1) (buf(ipd)) (1))
              DO j=1 k 1
                ASSIGN z(j) (* z(j) buf(j))
110             CONTINUE
              END DO
            ENDIF
120         CONTINUE
          END DO
          DO i=1 k 1
            ASSIGN z(i) __sign_r8[[((__sqrt_r8[[(((U- z(i))))]]) (w(i)))]]
130         CONTINUE
          END DO
        ENDIF
      ENDIF
      IF (AND (= myrow drow) (= mycol dcol))
        CALL dcopy ((k) (z(FULL)) (1) (buf(FULL)) (1))
        CALL dcopy ((k) (buf((+ (* 2 k) 1))) (1) (buf((+ k 1))) (1))
        CALL dgebs2d ((ictxt) ('All') (' ') ((* 2 k)) (1) (buf(FULL)) ((* 2 k)))
      ELSE
        CALL dgebr2d ((ictxt) ('All') (' ') ((* 2 k)) (1) (buf(FULL)) ((* 2 k)) (drow) (dcol))
        CALL dcopy ((k) (buf(FULL)) (1) (z(FULL)) (1))
      ENDIF
      ASSIGN klc 0
      ASSIGN klr 0
      DO i=1 k 1
        ASSIGN gi indx(i)
        ASSIGN d(gi) buf((+ k i))
        ASSIGN col indcol(gi)
        ASSIGN row indrow(gi)
        IF (= col mycol)
          ASSIGN klc (+ klc 1)
          ASSIGN indxc(klc) i
        ENDIF
        IF (= row myrow)
          ASSIGN klr (+ klr 1)
          ASSIGN indxr(klr) i
        ENDIF
140     CONTINUE
      END DO
      IF (<> mykl 0)
        DO j=1 mykl 1
          ASSIGN kk indxc(j)
          ASSIGN ju indx(kk)
          ASSIGN jju indxg2l[[((ju) (nb) (j) (j) (npcol))]]
          CALL dlaed4 ((k) (kk) (dlamda(FULL)) (w(FULL)) (buf(FULL)) (rho) (aux) (iinfo))
          IF (<> iinfo 0)
            ASSIGN info kk
          ENDIF
          IF (OR (= k 1) (= k 2))
            DO i=1 klr 1
              ASSIGN kk indxr(i)
              ASSIGN iu indx(kk)
              ASSIGN iiu indxg2l[[((iu) (nb) (j) (j) (nprow))]]
              ASSIGN u(iiu , jju) buf(kk)
150           CONTINUE
            END DO
            GOTO 180
          ENDIF
          DO i=1 k 1
            ASSIGN buf(i) (/ z(i) buf(i))
160         CONTINUE
          END DO
          ASSIGN temp dnrm2[[((k) (buf(FULL)) (1))]]
          DO i=1 klr 1
            ASSIGN kk indxr(i)
            ASSIGN iu indx(kk)
            ASSIGN iiu indxg2l[[((iu) (nb) (j) (j) (nprow))]]
            ASSIGN u(iiu , jju) (/ buf(kk) temp)
170         CONTINUE
          END DO
180       CONTINUE
        END DO
      ENDIF
190   CONTINUE
      RETURN 

