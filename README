1) Directories:

./
	Root directory for gfortran2xml, including all source files
	and examples.

	Files:

	./Makefile       File to build all sources and create
		         gfortran2xml executable
	./README         This file.
	./ptd-scanner.l  Lexical definitions for scanning .ptd files
	./ptd-parser.y   Parser definition (grammar) for .ptd files
	./xml-fortran.c  Contains the C routines called by the
		         scanner/parser for generating the xml file.
	./gfortran2xml.h Header file for gfortan2xml.
	
./examples
	Directory containing an example f90 source file, the parse
	tree dump output, and the xml generated by gfortran2xml.

	Files:

	./examples/LinearFunction.f90   sample f90 file
        ./examples/LinearFunction.ptd   parse tree dump from gfortran
        ./examples/LinearFunction.xml   xml generated from .ptd by 
                                        gfortran2xml

2) Building:

To build the gfortran2xml tool, simply execute the following in the
root directory for gfortran2xml (i.e., ./):

(NOTE: $> represents the command-line prompt)

$>make

This will generate the scanner and parser, build all objects, and
create the executable, gfortran2xml.  To remove the object files after
running make (to save space, remove clutter, etc.), you can run the 

$>make clean

command, which will not remove the gfortran2xml executable (see below).

3) Cleanup:

$>make clean

Will remove all object files that were created, along with the
generated source and header files for the scanner and parser.  This
rule will NOT remove the executable created, gfortran2xml, so it can
be used after building the tool to remove unnecessary files.

$>make allclean

Will remove the tool executable (gfortran2xml) and all objects, 
generated source and header files (same as '$>make clean' above, but
with the addition of removing the gfortran2xml executable).

4) Using:

To use the gfortran2xml, you simply run the command and provide the
parse-tree-dump input (from gfortran -fdump-parse-tree).  For example,
if you have a sample f90 file, myF90.f90, you can get the parse tree
information from gfortran with the following command:

$>gfortran -c -fdump-parse-tree myF90.f90

gfortran will dump the parse tree information to stdout, so to capture
it, you can simply redirect output:

$>gfortran -c -fdump-parse-tree myF90.f90 > myF90.ptd

The .ptd stands for "parse-tree-dump".

Now, use redirected input to gfortran2xml to generate the xml.

$>gfortran2xml < myF90.ptd

gfortran2xml will output to stdout by default, but you can again
redirect stdout to save the xml to a file:

$>gfortran2xml < myF90.ptd > myF90.xml


